/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps } from "restful-react";

export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;

/**
 * The Pagination Object contains information relating to the number of total results available as well as the number of results fetched and their relative positions.
 * 
 */
export interface Pagination {
  /**
   * Position in pagination.
   */
  offset?: number;
  /**
   * Total number of items available.
   */
  total_count?: number;
  /**
   * Total number of items returned.
   */
  count?: number;
}

/**
 * The Meta Object contains basic information regarding the request, whether it was successful, and the response given by the API.  Check `responses` to see a description of types of response codes the API might give you under different cirumstances.
 * 
 */
export interface Meta {
  /**
   * HTTP Response Message
   */
  msg?: string;
  /**
   * HTTP Response Code
   */
  status?: number;
  /**
   * A unique ID paired with this response from the API.
   */
  response_id?: string;
}

/**
 * The User Object contains information about the user associated with a GIF and URLs to assets such as that user's avatar image, profile, and more.
 */
export interface User {
  /**
   * The URL for this user's avatar image.
   */
  avatar_url?: string;
  /**
   * The URL for the banner image that appears atop this user's profile page.
   */
  banner_url?: string;
  /**
   * The URL for this user's profile.
   */
  profile_url?: string;
  /**
   * The username associated with this user.
   */
  username?: string;
  /**
   * The display name associated with this user (contains formatting the base username might not).
   */
  display_name?: string;
  /**
   * The Twitter username associated with this user, if applicable.
   */
  twitter?: string;
}

export interface Image {
  /**
   * The publicly-accessible direct URL for this GIF.
   */
  url?: string;
  /**
   * The width of this GIF in pixels.
   */
  width?: string;
  /**
   * The height of this GIF in pixels.
   */
  height?: string;
  /**
   * The size of this GIF in bytes.
   */
  size?: string;
  /**
   * The number of frames in this GIF.
   */
  frames?: string;
  /**
   * The URL for this GIF in .MP4 format.
   */
  mp4?: string;
  /**
   * The size in bytes of the .MP4 file corresponding to this GIF.
   */
  mp4_size?: string;
  /**
   * The URL for this GIF in .webp format.
   */
  webp?: string;
  /**
   * The size in bytes of the .webp file corresponding to this GIF.
   */
  webp_size?: string;
}

export interface Gif {
  /**
   * Type of the gif. By default, this is almost always gif
   */
  type?: "gif";
  /**
   * This GIF's unique ID
   */
  id?: string;
  /**
   * The unique slug used in this GIF's URL
   */
  slug?: string;
  /**
   * The unique URL for this GIF
   */
  url?: string;
  /**
   * The unique bit.ly URL for this GIF
   */
  bitly_url?: string;
  /**
   * A URL used for embedding this GIF
   */
  embded_url?: string;
  /**
   * The username this GIF is attached to, if applicable
   */
  username?: string;
  /**
   * The page on which this GIF was found
   */
  source?: string;
  /**
   * The MPAA-style rating for this content. Examples include Y, G, PG, PG-13 and R
   */
  rating?: string;
  /**
   * Currently unused
   */
  content_url?: string;
  /**
   * An array of tags for this GIF (Note: Not available when using the Public Beta Key)
   * 
   */
  tags?: string[];
  /**
   * An array of featured tags for this GIF (Note: Not available when using the Public Beta Key)
   * 
   */
  featured_tags?: string[];
  user?: User;
  /**
   * The top level domain of the source URL.
   */
  source_tld?: string;
  /**
   * The URL of the webpage on which this GIF was found.
   */
  source_post_url?: string;
  /**
   * The date on which this GIF was last updated.
   */
  update_datetime?: string;
  /**
   * The date this GIF was added to the GIPHY database.
   */
  create_datetime?: string;
  /**
   * The creation or upload date from this GIF's source.
   */
  import_datetime?: string;
  /**
   * The date on which this gif was marked trending, if applicable.
   */
  trending_datetime?: string;
  /**
   * An object containing data for various available formats and sizes of this GIF.
   */
  images?: {
  fixed_height?: Image;
  fixed_height_still?: Image;
  fixed_height_downsampled?: Image;
  fixed_width?: Image;
  fixed_width_still?: Image;
  fixed_width_downsampled?: Image;
  fixed_height_small?: Image;
  fixed_height_small_still?: Image;
  fixed_width_small?: Image;
  fixed_width_small_still?: Image;
  downsized?: Image;
  downsized_still?: Image;
  downsized_large?: Image;
  downsized_medium?: Image;
  downsized_small?: Image;
  original?: Image;
  original_still?: Image;
  looping?: Image;
  preview?: Image;
  preview_gif?: Image;
};
}

/**
 * Your request was formatted incorrectly or missing required parameters.
 */
export type BadRequestResponse = void;

/**
 * You weren't authorized to make your request; most likely this indicates an issue with your API Key.
 */
export type ForbiddenResponse = void;

/**
 * The particular GIF you are requesting was not found. This occurs, for example, if you request a GIF by an id that does not exist.
 */
export type NotFoundResponse = void;

/**
 * Your API Key is making too many requests. Read about [requesting a Production Key](https://developers.giphy.com/docs/#access) to upgrade your API Key rate limits.
 * 
 */
export type TooManyRequestsResponse = void;

export interface SearchGifsResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface SearchGifsQueryParams {
  /**
   * Search query term or prhase.
   */
  q: string;
  /**
   * The maximum number of records to return.
   */
  limit?: number;
  /**
   * An optional results offset.
   */
  offset?: number;
  /**
   * Filters results by specified rating.
   */
  rating?: string;
  /**
   * Specify default language for regional content; use a 2-letter ISO 639-1 language code.
   */
  lang?: string;
}

export type SearchGifsProps = Omit<GetProps<SearchGifsResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, SearchGifsQueryParams>, "path">;

/**
 * Search GIFs
 * 
 * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho.
 * 
 */
export const SearchGifs = (props: SearchGifsProps) => (
  <Get<SearchGifsResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, SearchGifsQueryParams>
    path={`/gifs/search`}
    {...props}
  />
);

export type UseSearchGifsProps = Omit<UseGetProps<SearchGifsResponse, SearchGifsQueryParams>, "path">;

/**
 * Search GIFs
 * 
 * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho.
 * 
 */
export const useSearchGifs = (props: UseSearchGifsProps) => useGet<SearchGifsResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, SearchGifsQueryParams>(`/gifs/search`, props);


export interface TrendingGifsResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface TrendingGifsQueryParams {
  /**
   * The maximum number of records to return.
   */
  limit?: number;
  /**
   * An optional results offset.
   */
  offset?: number;
  /**
   * Filters results by specified rating.
   */
  rating?: string;
}

export type TrendingGifsProps = Omit<GetProps<TrendingGifsResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TrendingGifsQueryParams>, "path">;

/**
 * Trending GIFs
 * 
 * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default.
 * 
 */
export const TrendingGifs = (props: TrendingGifsProps) => (
  <Get<TrendingGifsResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TrendingGifsQueryParams>
    path={`/gifs/trending`}
    {...props}
  />
);

export type UseTrendingGifsProps = Omit<UseGetProps<TrendingGifsResponse, TrendingGifsQueryParams>, "path">;

/**
 * Trending GIFs
 * 
 * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default.
 * 
 */
export const useTrendingGifs = (props: UseTrendingGifsProps) => useGet<TrendingGifsResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TrendingGifsQueryParams>(`/gifs/trending`, props);


export interface TranslateGifResponse {
  data?: Gif;
  meta?: Meta;
}

export interface TranslateGifQueryParams {
  /**
   * Search term.
   */
  s: string;
}

export type TranslateGifProps = Omit<GetProps<TranslateGifResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TranslateGifQueryParams>, "path">;

/**
 * Translate phrase to GIF
 * 
 * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIF
 * 
 */
export const TranslateGif = (props: TranslateGifProps) => (
  <Get<TranslateGifResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TranslateGifQueryParams>
    path={`/gifs/translate`}
    {...props}
  />
);

export type UseTranslateGifProps = Omit<UseGetProps<TranslateGifResponse, TranslateGifQueryParams>, "path">;

/**
 * Translate phrase to GIF
 * 
 * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIF
 * 
 */
export const useTranslateGif = (props: UseTranslateGifProps) => useGet<TranslateGifResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TranslateGifQueryParams>(`/gifs/translate`, props);


export interface RandomGifResponse {
  data?: Gif;
  meta?: Meta;
}

export interface RandomGifQueryParams {
  /**
   * Filters results by specified tag.
   */
  tag?: string;
  /**
   * Filters results by specified rating.
   */
  rating?: string;
}

export type RandomGifProps = Omit<GetProps<RandomGifResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, RandomGifQueryParams>, "path">;

/**
 * Random GIF
 * 
 * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
 * 
 */
export const RandomGif = (props: RandomGifProps) => (
  <Get<RandomGifResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, RandomGifQueryParams>
    path={`/gifs/random`}
    {...props}
  />
);

export type UseRandomGifProps = Omit<UseGetProps<RandomGifResponse, RandomGifQueryParams>, "path">;

/**
 * Random GIF
 * 
 * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
 * 
 */
export const useRandomGif = (props: UseRandomGifProps) => useGet<RandomGifResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, RandomGifQueryParams>(`/gifs/random`, props);


export interface GetGifByIdResponse {
  data?: Gif;
  meta?: Meta;
}

export type GetGifByIdProps = Omit<GetProps<GetGifByIdResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, void>, "path"> & {gifId: number};

/**
 * Get GIF by Id
 * 
 * Returns a GIF given that GIF's unique ID
 * 
 */
export const GetGifById = ({gifId, ...props}: GetGifByIdProps) => (
  <Get<GetGifByIdResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, void>
    path={`/gifs/${gifId}`}
    {...props}
  />
);

export type UseGetGifByIdProps = Omit<UseGetProps<GetGifByIdResponse, void>, "path"> & {gifId: number};

/**
 * Get GIF by Id
 * 
 * Returns a GIF given that GIF's unique ID
 * 
 */
export const useGetGifById = ({gifId, ...props}: UseGetGifByIdProps) => useGet<GetGifByIdResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, void>(`/gifs/${gifId}`, props);


export interface GetGifsByIdResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface GetGifsByIdQueryParams {
  /**
   * Filters results by specified GIF IDs, separated by commas.
   */
  ids?: string;
}

export type GetGifsByIdProps = Omit<GetProps<GetGifsByIdResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, GetGifsByIdQueryParams>, "path">;

/**
 * Get GIFs by ID
 * 
 * A multiget version of the get GIF by ID endpoint.
 * 
 */
export const GetGifsById = (props: GetGifsByIdProps) => (
  <Get<GetGifsByIdResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, GetGifsByIdQueryParams>
    path={`/gifs`}
    {...props}
  />
);

export type UseGetGifsByIdProps = Omit<UseGetProps<GetGifsByIdResponse, GetGifsByIdQueryParams>, "path">;

/**
 * Get GIFs by ID
 * 
 * A multiget version of the get GIF by ID endpoint.
 * 
 */
export const useGetGifsById = (props: UseGetGifsByIdProps) => useGet<GetGifsByIdResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, GetGifsByIdQueryParams>(`/gifs`, props);


export interface SearchStickersResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface SearchStickersQueryParams {
  /**
   * Search query term or prhase.
   */
  q: string;
  /**
   * The maximum number of records to return.
   */
  limit?: number;
  /**
   * An optional results offset.
   */
  offset?: number;
  /**
   * Filters results by specified rating.
   */
  rating?: string;
  /**
   * Specify default language for regional content; use a 2-letter ISO 639-1 language code.
   */
  lang?: string;
}

export type SearchStickersProps = Omit<GetProps<SearchStickersResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, SearchStickersQueryParams>, "path">;

/**
 * Search Stickers
 * 
 * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs.
 * 
 */
export const SearchStickers = (props: SearchStickersProps) => (
  <Get<SearchStickersResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, SearchStickersQueryParams>
    path={`/stickers/search`}
    {...props}
  />
);

export type UseSearchStickersProps = Omit<UseGetProps<SearchStickersResponse, SearchStickersQueryParams>, "path">;

/**
 * Search Stickers
 * 
 * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs.
 * 
 */
export const useSearchStickers = (props: UseSearchStickersProps) => useGet<SearchStickersResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, SearchStickersQueryParams>(`/stickers/search`, props);


export interface TrendingStickersResponse {
  data?: Gif[];
  pagination?: Pagination;
  meta?: Meta;
}

export interface TrendingStickersQueryParams {
  /**
   * The maximum number of records to return.
   */
  limit?: number;
  /**
   * An optional results offset.
   */
  offset?: number;
  /**
   * Filters results by specified rating.
   */
  rating?: string;
}

export type TrendingStickersProps = Omit<GetProps<TrendingStickersResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TrendingStickersQueryParams>, "path">;

/**
 * Trending Stickers
 * 
 * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default.
 * 
 */
export const TrendingStickers = (props: TrendingStickersProps) => (
  <Get<TrendingStickersResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TrendingStickersQueryParams>
    path={`/stickers/trending`}
    {...props}
  />
);

export type UseTrendingStickersProps = Omit<UseGetProps<TrendingStickersResponse, TrendingStickersQueryParams>, "path">;

/**
 * Trending Stickers
 * 
 * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default.
 * 
 */
export const useTrendingStickers = (props: UseTrendingStickersProps) => useGet<TrendingStickersResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TrendingStickersQueryParams>(`/stickers/trending`, props);


export interface TranslateStickerResponse {
  data?: Gif;
  meta?: Meta;
}

export interface TranslateStickerQueryParams {
  /**
   * Search term.
   */
  s: string;
}

export type TranslateStickerProps = Omit<GetProps<TranslateStickerResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TranslateStickerQueryParams>, "path">;

/**
 * Translate phrase to Sticker
 * 
 * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
 * 
 */
export const TranslateSticker = (props: TranslateStickerProps) => (
  <Get<TranslateStickerResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TranslateStickerQueryParams>
    path={`/stickers/translate`}
    {...props}
  />
);

export type UseTranslateStickerProps = Omit<UseGetProps<TranslateStickerResponse, TranslateStickerQueryParams>, "path">;

/**
 * Translate phrase to Sticker
 * 
 * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.
 * 
 */
export const useTranslateSticker = (props: UseTranslateStickerProps) => useGet<TranslateStickerResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, TranslateStickerQueryParams>(`/stickers/translate`, props);


export interface RandomStickerResponse {
  data?: Gif;
  meta?: Meta;
}

export interface RandomStickerQueryParams {
  /**
   * Filters results by specified tag.
   */
  tag?: string;
  /**
   * Filters results by specified rating.
   */
  rating?: string;
}

export type RandomStickerProps = Omit<GetProps<RandomStickerResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, RandomStickerQueryParams>, "path">;

/**
 * Random Sticker
 * 
 * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
 * 
 */
export const RandomSticker = (props: RandomStickerProps) => (
  <Get<RandomStickerResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, RandomStickerQueryParams>
    path={`/stickers/random`}
    {...props}
  />
);

export type UseRandomStickerProps = Omit<UseGetProps<RandomStickerResponse, RandomStickerQueryParams>, "path">;

/**
 * Random Sticker
 * 
 * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.
 * 
 */
export const useRandomSticker = (props: UseRandomStickerProps) => useGet<RandomStickerResponse, BadRequestResponse | ForbiddenResponse | NotFoundResponse | TooManyRequestsResponse, RandomStickerQueryParams>(`/stickers/random`, props);

